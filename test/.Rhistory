append(a, mean(rexp(40,.2)))
a
a <- NULL
a <- append(a, mean(rexp(40,.2)))
a
a <- append(a, mean(rexp(40,.2)))
a
a <- append(a, mean(rexp(40,.2)))
a
sim <- NULL
for (i %in% 1:1000) { sim <- append(sim, mean(rexp(40,.2)))}
for (i in 1:1000) { sim <- append(sim, mean(rexp(40,.2)))}
sim
hist(sim)
hist(sim, xlab="mean", ylab="")
hist(sim, xlab="mean", ylab="", breaks = 40)
sim.den <- density(sim)
x <- seq(min(sim), max(sim), length=100)
x
sim.den
lines(sim.den)
hist(sim,probability = TRUE)
hist(sim,probability = TRUE, breaks=40)
hist(sim,probability = TRUE, breaks=50)
lines(density(sim))
y <- dnorm(x, 5, 5)
y
lines(x,y)
y <- dnorm(x, 5, 5/squrt(40))
y <- dnorm(x, 5, 5/sqrt(40))
lines(x,y)
lines(x,y, pch=2)
lines(x,y, pch=2)
lines(x,y, pch=2)
lines(x,y, pch=22)
lines(x,y, pch=22, col="red")
lines(x,y, pch=22, col="red", lwd=2)
lines(x,y, pch=22, col="red", lwd=2, lty=1)
lines(x,y, pch=22, col="red", lwd=2, lty=2)
lines(x,y, pch=22, col="red", lwd=2, lty=3)
sim
hist(mean, probability = T)
hist(sim, probability = T)
hist(sim, probability = T, breaks=50)
hist(sim, probability = T, breaks=100)
lines(density(sim), col="green")
lines(density(sim), col="green", lwd=1.5)
lines(density(sim), col="green", lwd=2)
ablines(v=mean(sim))
abline(v=mean(sim))
abline(v=mean(sim), col="darkblue")
abline(v=mean(sim), col="darkblue", lwd=2)
text(5,0.1,"hello")
text(5,0.1,"hello", angle=90)
text(5,0.1,"hello", pos=2)
text(5,0.1,"hello", las=3)
dev.off()
hist(sim, probability = TRUE)
text(5,.1,"hello", las=3)
text(5,.1,"hello", las=2)
text(5,.1,"hello", las=1)
text(5,.1,"hello", srt=90)
text(5,.1,"hello", srt=90, pos=1)
text(5,.1,"hello", srt=90, pos=-1)
text(5,.1,"hello", srt=90, pos=2)
dev.off()
hist(sim, probability = TRUE, xlab = "mean", ylab="density")
abline(v=mean(sim), lwd=2, col="darkblue")
text(5,0.1, "sample mean", srt=90)
text(5,0.1, "sample mean", srt=90, pos=1)
text(5,0.1, "sample mean", srt=90, pos=2)
text(5,0.1, "sample mean", srt=90, pos=3)
dev.off()
abline(v=mean(sim), lwd=2, col="blue")
hist(sim, probability = TRUE, xlab = "mean", ylab="density")
abline(v=mean(sim), lwd=2, col="blue")
text(5,0.1, "sample mean", srt=90, pos=3)
lines(x,y,lty=2, lwd=2, col="red")
lines(x,y,lty=1, lwd=2, col="red")
lines(density(sim))
qqnorm(sim)
qqline(sim)
rm(list=ls())
swirl()
swirl
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lim(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summar(regrline)
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel~mag+dis, attenu)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
0
0
0
info()
main()
nxt()
bye()
swirl()
ols.ic <-fit$coef[1]
ols.slope <- ft$coef[2]
ols.slope <- fit$coef[2]
rhs - lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch ~ gpa)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
fit <- lm(y~x)
fit
?lm
fit$residuals
fit$coefficients
fit$rank
library(datasets)
data("mtcars")
str(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x[1]
(x[1] - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
fit <- lm(y~x)
fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(x~y)
lm(y~x -1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x -1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x<-c(140,138,150,148,135)
y<- c(132,135,151,146,130)
t.test(x,y,var.equal = TRUE, paired = TRUE)
1100+c(-1,1)*qt(0.975,8)*30/sqrt(9)
pbinom(3,4,.5, lower.tail = TRUE)
pbinom(3,4,.5, lower.tail = FALSE)
pbinom(4,4,.5, lower.tail = FALSE)
ppois(10/1787,.01,lower.tail = TRUE)
ppois(10/1787,.01,lower.tail = FALSE)
ppois((10/1787-1/100)/0.01,0.01)
ppois(1000/1787-1, .01)
poisson.test(10,T=1787,r=1/100,alternative="l")
pooled.var = (1.5^2*8 + 1.8^2*8)/(9+9-2)
test_stat <- -3-1/sqrt(pooled.var/9)
pt(test_stat,8)
pt(test_stat,8) < .01
power.t.test(100,0.01, 0.04)
power.t.test(100,0.01, 0.04, alternative = "one.sided")
power.t.test(100,0.01, 0.04, alternative = "one.sided", type=one.sample)
power.t.test(100,0.01, 0.04, alternative = "one.sided", type="one.sample")
qt(0.95,99)
power.t.test(power=.9,delta=.01,sd=0.04,type="one.sample",alternative = "one.sided")
binom.test(3,4,p=0.5,alternative="g")
library(datasets)
library(UsingR)
data("father.son")
head(father.son)
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g <- geom_point()
g
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g <- g + geom_point()
g
g <- g + geom_point(alpha = 0.3)
g
dev.off()
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g <- g + geom_point(alpha = 0.3)
g
g <- g + geom_point(alpha = 0.5, fill="green")
g
dev.off()
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g1 <- g + geom_point(alpha = 0.5, fill="green")
g1
g1 <- NULL
g1 <- g + geom_point(alpha = 0.5, fill="green", size=2)
g1
g1 <- NULL
g1
dev.off()
g <- ggplot(data=father.son, aes(x=fheight, y=sheight))
g1 <- g + geom_point(alpha = 0.5, fill="green", size=2)
g1
g1 <- g + geom_point(alpha = 0.4, fill="green", size=2)
g1
fit <- lm(sheight ~ fheight, father.son)
g1 + geom_abline(lm)
g1 + geom_smooth(method="lm")
fit
plot(father.son$sheight, fit$residuals)
plot(father.son$fheight, fit$residuals)
abline(h=0, col="red")
summary(fit)
var(resid(fit))
fit$coef
fit$coef[2]
fit$coef[2]^2
data("mtcars")
head(mtcars)
fit <- lm(mpg ~ hp, mtcars)
summary(fit)
summary(fit)$r.squard
summary(fit)$r.squared
plot(mtcars$hp, resid(fit))
abline(h=0, col="darkred")
fit
resid(fit)^2 /(nrow(mtcars)-2)
var(resid(fit)) /(nrow(mtcars)-2)
summary(fit)
var(fit$residuals)/(nrow(mtcars)-2)
fit
sum(resid(fit)^2)/(nrow(mtcars)-2)
summary(fit)$sigma
summary(fit)$sigma^2
summary(fit)$r.squared
nrow(mtcars)
fit <- lm(sheight ~ fheight, data=father.son)
summary(fit)
fit$coefficients
fit$coef
summary(fit)
summary(fit)$coefficients
summary(fit)$coefficients[2,1]
summary(fit)$coefficients[2,1]+c(-1,1)*qt(.975, 1076)*summary(fit)$coefficients[2,2]
confint(fit)
fit <- lm(sheight ~ I(fheight - mean(fheight)), data=father.son)
confint(fit)
fit <- lm(sheight ~ fheight, data=father.son)
predict(fit, newdata = data.frame(fheight=mean(father.son$fheight)), interval = "confidence")
predict(fit, newdata = data.frame(fheight=mean(father.son$fheight)), interval = "prediction")
head(mtcars)
fit <- lm(mpg ~ hp, mtcars)
summary(fit)
confint(fit)
fit <- lm(mpg ~ I(hp - mean(mtcars$hp)), mtcars)
confint(fit)
m <- mean(mtcars$hp)
predict(fit, newdata = data.frame(hp = m), interval = "confidence")
predict(fit, newdata = data.frame(hp = m), interval = "prediction")
fit <- lm(mpg ~ hp, mtcars)
predict(fit, newdata = data.frame(hp = m), interval = "confidence")
xval <- seq(min(mtcars$hp):max(mtcars$hp),length=100)
xval <- seq(min(mtcars$hp),max(mtcars$hp),length=100)
xval
predict(fit, newdata = data.frame(xval), interval = "confidence")
predict(fit, newdata = data.frame(hp=xval), interval = "confidence")
conf <- predict(fit, newdata = data.frame(hp=xval), interval = "confidence")
head(conf)
conf$interval <= "confidence"
conf$interval <- "confidence"
head(conf)
dim(conf)
conf <- predict(fit, newdata = data.frame(hp=xval), interval = "confidence")
class(conf)
pred <- predict(fit, newdata = data.frame(hp=xval), interval = "prediction")
class(pred)
conf <- data.frame(conf)
head(conf)
conf$int <- "conf"
head(conf)
pred$int <- "pred"
pred <- predict(fit, newdata = data.frame(hp=xval), interval = "prediction")
pred <- data.frame(pred)
pred$int <- "pred"
df <- cbind(conf,pred)
head(df)
df <- rbind(conf,pred)
head(df)
conf$x <- xval
pred$x <- xval
df <- rbind(conf,pred)
head(df)
tail(df)
names(df)
names(df)[1]="y"
g <- ggplot(df, aes(x=x, y=y))
g <- g + geom_ribbon(aes(ymin =lwer, ymax=upr, fill = int, alpha = 0.2)
g
g <- g + geom_ribbon(aes(ymin =lwer, ymax=upr, fill = int, alpha = 0.2))
g
g <- g + geom_ribbon(aes(ymin =lwr, ymax=upr, fill = int, alpha = 0.2))
g
dev.off()
g <- ggplot(df, aes(x=x, y=y))
g <- g + geom_ribbon(aes(ymin =lwr, ymax=upr, fill = int, alpha = 0.2))
g
g <- g + geom_line()
g
g <- g + geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y), size=4)
g
x
y
x <- mtcars$hp
y <- mtcars$mpg
g <- g + geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y), size=4)
g
dev.off()
g <- ggplot(df, aes(x=x, y=y))
g <- g + geom_ribbon(aes(ymin =lwr, ymax=upr, fill = int, alpha = 0.2))
g <- g + geom_line()
g <- g + geom_point(data=data.frame(x=x, y=y), aes(x=x, y=y), size=3)
g
library(MASS)
head(shuttle)
str(shuttle$wind)
relevel(wind, "tail", shuttle)
?relevel
relevel(suttle$wind, "tail")
relevel(shuttle$wind, "tail")
str(shuttle$wind)
head(shuttle)
head(shuttle$use)
fit <- glm(use ~ wind, family = binomial, shuttle)
summary(fit)
exp(-0.03181)
1/0.9686906
exp(0.03181)
str(shuttle)
fit = glm(relevel(use, "noauto") ~ wind, binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail"), binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail") + magn, binomial, shuttle)
summary(fit)
exp(-3.201e-02)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail") + magn, binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "noauto") ~ relevel(wind, "tail"), binomial, shuttle)
summary(fit)
fit = glm(relevel(use, "auto") ~ relevel(wind, "tail"), binomial, shuttle)
summary(fit)
data("InsectSprays")
head(InsectSprays)
gg <- glm(count ~ spray, poisson, InsectSprays)
summary(gg)
gg2 <- glm(count ~ spray+offset(10), poisson, InsectSprays)
gg2 <- glm(count ~ spray+offset(1), poisson, InsectSprays)
set.seed(123)
dataMatrix = matrix(rnorm(400), nrow=40)
dataMatrix
dim(dataMatrix)
head(dataMatrix)
image(1:10,1:40,t(dataMatrix))
t(dataMatrix)
t(dataMatrix)[,40:1]
image(t(dataMatrix)[,40:1])
heatmap(dataMatrix)
#create a vector with mtcars's column names - "am"
x <- names(mtcars)
x <- x[! x == "am" & ! x == "mpg" ]
#tt <- data.frame()
#names(tt) <- c("formula", "coefficient", "P-Value")
for (i in 1:length(x)) {
fml <- NULL; y <-NULL ; fit_temp <- NULL
fml <- paste("mpg ~ am + ", x[i] )
fit_temp <- lm(fml, data=mtcars)
y <- c(fml,round(summary(fit_temp)$coefficients[2,1],2),
round(summary(fit_temp)$coefficients[2,4],2))
y <- as.character(y); print(y)
}
par(mfrow=c(1,3))
with(mtcars, plot(disp, mpg, col=am))
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am))
#load mtcars data
data(mtcars)
mtcars$am = as.factor(mtcars$am)
levels(mtcars$am) = c("automatic", "manual")
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$vs = as.factor(mtcars$vs)
mtcars$gear = as.factor(mtcars$gear)
mtcars$carb = as.factor(mtcars$carb)
par(mfrow=c(1,3))
with(mtcars, plot(disp, mpg, col=am))
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am))
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=am))
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am))
plot(am,cyl)
with(mtcars,plot(am,cyl))
plot(cyl,mpg, type=p)
with(mtcars, plot(cyl,mpg, type=p))
with(mtcars, plot(cyl,mpg, type="p"))
dev.off()
with(mtcars, plot(wt, mpg, col=am))
with(mtcars, plot(wt, mpg, col=am, pch=19))
legend("topright", col=c(3,4), legend=c("manaual", "automatic"), pch=19)
legend("topright", col=c(3,4), legend=c("manaual", "automatic"), pch=19)
plot(am, wt)
with(mtcars,plot(am, wt))
with(mtcars,plot(am, cyl))
plot(bestFit)
fitAll = lm(mpg ~ ., mtcars)
library(MASS)
bestFit = stepAIC(fitAll, direction="both")
plot(bestFit)
cooks.distance(bestFit)
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=3+am))
with(mtcars, plot(hp, mpg, col=3+am))
with(mtcars, plot(wt, mpg, col=3+am))
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=3+am))
with(mtcars, plot(hp, mpg, col=3+am))
with(mtcars, plot(wt, mpg, col=3+(am="automatic"))
)
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"))
)
par(mfrow=c(1,3))
with(mtcars, plot(cyl, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(hp, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(am, wt))
plot(as.numeric(mtcars$cyl), mpg, col=3+(am=="automatic"), pch=19))
plot(as.numeric(mtcars$cyl), mpg, col=3+(am=="automatic"), pch=19)
plot(as.numeric(mtcars$cyl), mtscars$mpg, col=3+(mtcars$am=="automatic"), pch=19)
plot(as.numeric(mtcars$cyl), mtcars$mpg, col=3+(mtcars$am=="automatic"), pch=19)
plot(mtcars$am, as.numeric(mtcars$cyl))
plot(mtcars$am, mtcars$cyl)
boxplot(mtcars$am, mtcars$cyl)
boxplot(mtcars$am, as.numeric(mtcars$cyl))
plot(mtcars$am, as.numeric(mtcars$cyl))
#par(mfrow=c(1,3))
#with(mtcars, plot(cyl, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(hp, mpg, col=3+(am=="automatic"), pch=19))
#with(mtcars, plot(am, wt))
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"), pch=19))
dev.off()
#par(mfrow=c(1,3))
#with(mtcars, plot(cyl, mpg, col=3+(am=="automatic"), pch=19))
with(mtcars, plot(hp, mpg, col=3+(am=="automatic"), pch=19))
#with(mtcars, plot(am, wt))
with(mtcars, plot(wt, mpg, col=3+(am=="automatic"), pch=19))
plot(bestFit)
```{r cache=TRUE}
fit.rf = train(classe ~ ., data=training, method="rf",
trControl=trainControl(method="cv",number=5), prox=TRUE,allowParallel=TRUE)
predict.rf = predict(fit.rf, testing)
confusionMatrix(predict.rf, testing$classe)
install.packages("shiny")
setwd("~/github/shiny")
runApp
runApp()
library(shiny)
runApp()
dir()
cd test
setwd("test")
runApp()
runApp()
runApp()
